var ne = (r, e, t) => {
  if (!e.has(r))
    throw TypeError("Cannot " + t);
};
var a = (r, e, t) => (ne(r, e, "read from private field"), t ? t.call(r) : e.get(r)), c = (r, e, t) => {
  if (e.has(r))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(r) : e.set(r, t);
}, p = (r, e, t, n) => (ne(r, e, "write to private field"), n ? n.call(r, t) : e.set(r, t), t);
var m = (r, e, t) => (ne(r, e, "access private method"), t);
if (typeof File > "u") {
  class r extends Blob {
    constructor(t, n, s) {
      super(t);
      let i;
      s != null && s.lastModified && (i = /* @__PURE__ */ new Date()), (!i || isNaN(i.getFullYear())) && (i = /* @__PURE__ */ new Date()), this.lastModifiedDate = i, this.lastModified = i.getMilliseconds(), this.name = n || "";
    }
  }
  global.File = r;
}
function ye(r) {
  return new Promise(function(e, t) {
    r.onload = r.onerror = function(n) {
      r.onload = r.onerror = null, n.type === "load" ? e(r.result) : t(new Error("Failed to read the blob/file"));
    };
  });
}
typeof Blob.prototype.arrayBuffer > "u" && (Blob.prototype.arrayBuffer = function() {
  const e = new FileReader();
  return e.readAsArrayBuffer(this), ye(e);
});
typeof Blob.prototype.text > "u" && (Blob.prototype.text = function() {
  const e = new FileReader();
  return e.readAsText(this), ye(e);
});
function Le() {
  const r = new Uint8Array([1, 2, 3, 4]), t = new File([r], "test").stream();
  try {
    return t.getReader({ mode: "byob" }), !0;
  } catch {
    return !1;
  }
}
(typeof Blob.prototype.stream > "u" || !Le()) && (Blob.prototype.stream = function() {
  let r = 0;
  const e = this;
  return new ReadableStream({
    type: "bytes",
    // 0.5 MB seems like a reasonable chunk size, let's adjust
    // this if needed.
    autoAllocateChunkSize: 512 * 1024,
    async pull(t) {
      const n = t.byobRequest.view, i = await e.slice(r, r + n.byteLength).arrayBuffer(), o = new Uint8Array(i);
      new Uint8Array(n.buffer).set(o);
      const l = o.byteLength;
      t.byobRequest.respond(l), r += l, r >= e.size && t.close();
    }
  });
});
if (typeof CustomEvent > "u") {
  class r extends Event {
    constructor(t, n = {}) {
      super(t, n), this.detail = n.detail;
    }
    initCustomEvent() {
    }
  }
  globalThis.CustomEvent = r;
}
const ae = Symbol("error"), le = Symbol("message");
class ie extends Event {
  /**
   * Create a new `ErrorEvent`.
   *
   * @param type The name of the event
   * @param options A dictionary object that allows for setting
   *                  attributes via object members of the same name.
   */
  constructor(e, t = {}) {
    super(e), this[ae] = t.error === void 0 ? null : t.error, this[le] = t.message === void 0 ? "" : t.message;
  }
  get error() {
    return this[ae];
  }
  get message() {
    return this[le];
  }
}
Object.defineProperty(ie.prototype, "error", { enumerable: !0 });
Object.defineProperty(ie.prototype, "message", { enumerable: !0 });
const Ie = typeof globalThis.ErrorEvent == "function" ? globalThis.ErrorEvent : ie;
function Oe(r) {
  return r instanceof Error ? "exitCode" in r && (r == null ? void 0 : r.exitCode) === 0 || (r == null ? void 0 : r.name) === "ExitStatus" && "status" in r && r.status === 0 : !1;
}
class Ne extends EventTarget {
  constructor() {
    super(...arguments), this.listenersCount = 0;
  }
  addEventListener(e, t) {
    ++this.listenersCount, super.addEventListener(e, t);
  }
  removeEventListener(e, t) {
    --this.listenersCount, super.removeEventListener(e, t);
  }
  hasListeners() {
    return this.listenersCount > 0;
  }
}
function qe(r) {
  r.asm = {
    ...r.asm
  };
  const e = new Ne();
  for (const t in r.asm)
    if (typeof r.asm[t] == "function") {
      const n = r.asm[t];
      r.asm[t] = function(...s) {
        var i;
        try {
          return n(...s);
        } catch (o) {
          if (!(o instanceof Error))
            throw o;
          const l = Me(
            o,
            (i = r.lastAsyncifyStackSource) == null ? void 0 : i.stack
          );
          if (r.lastAsyncifyStackSource && (o.cause = r.lastAsyncifyStackSource), e.hasListeners()) {
            e.dispatchEvent(
              new Ie("error", {
                error: o,
                message: l
              })
            );
            return;
          }
          throw Oe(o) || ze(l), o;
        }
      };
    }
  return e;
}
let se = [];
function De() {
  return se;
}
function Me(r, e) {
  if (r.message === "unreachable") {
    let t = je;
    e || (t += `

This stack trace is lacking. For a better one initialize 
the PHP runtime with { debug: true }, e.g. PHPNode.load('8.1', { debug: true }).

`), se = Ge(
      e || r.stack || ""
    );
    for (const n of se)
      t += `    * ${n}
`;
    return t;
  }
  return r.message;
}
const je = `
"unreachable" WASM instruction executed.

The typical reason is a PHP function missing from the ASYNCIFY_ONLY
list when building PHP.wasm.

You will need to file a new issue in the WordPress Playground repository
and paste this error message there:

https://github.com/WordPress/wordpress-playground/issues/new

If you're a core developer, the typical fix is to:

* Isolate a minimal reproduction of the error
* Add a reproduction of the error to php-asyncify.spec.ts in the WordPress Playground repository
* Run 'npm run fix-asyncify'
* Commit the changes, push to the repo, release updated NPM packages

Below is a list of all the PHP functions found in the stack trace to
help with the minimal reproduction. If they're all already listed in
the Dockerfile, you'll need to trigger this error again with long stack
traces enabled. In node.js, you can do it using the --stack-trace-limit=100
CLI option: 

`, ce = "\x1B[41m", We = "\x1B[1m", ue = "\x1B[0m", he = "\x1B[K";
let de = !1;
function ze(r) {
  if (!de && (de = !0, !(r != null && r.trim().startsWith("Program terminated with exit")))) {
    console.log(`${ce}
${he}
${We}  WASM ERROR${ue}${ce}`);
    for (const e of r.split(`
`))
      console.log(`${he}  ${e} `);
    console.log(`${ue}`);
  }
}
function Ge(r) {
  try {
    const e = r.split(`
`).slice(1).map((t) => {
      const n = t.trim().substring(3).split(" ");
      return {
        fn: n.length >= 2 ? n[0] : "<unknown>",
        isWasm: t.includes("wasm://")
      };
    }).filter(
      ({ fn: t, isWasm: n }) => n && !t.startsWith("dynCall_") && !t.startsWith("invoke_")
    ).map(({ fn: t }) => t);
    return Array.from(new Set(e));
  } catch {
    return [];
  }
}
class we {
  constructor({ concurrency: e }) {
    this._running = 0, this.concurrency = e, this.queue = [];
  }
  get running() {
    return this._running;
  }
  async acquire() {
    for (; ; )
      if (this._running >= this.concurrency)
        await new Promise((e) => this.queue.push(e));
      else {
        this._running++;
        let e = !1;
        return () => {
          e || (e = !0, this._running--, this.queue.length > 0 && this.queue.shift()());
        };
      }
  }
  async run(e) {
    const t = await this.acquire();
    try {
      return await e();
    } finally {
      t();
    }
  }
}
function ge(...r) {
  let e = r.join("/");
  const t = e[0] === "/", n = e.substring(e.length - 1) === "/";
  return e = oe(e), !e && !t && (e = "."), e && n && (e += "/"), e;
}
function Ve(r) {
  if (r === "/")
    return "/";
  r = oe(r);
  const e = r.lastIndexOf("/");
  return e === -1 ? "" : e === 0 ? "/" : r.substr(0, e);
}
function oe(r) {
  const e = r[0] === "/";
  return r = Je(
    r.split("/").filter((t) => !!t),
    !e
  ).join("/"), (e ? "/" : "") + r.replace(/\/$/, "");
}
function Je(r, e) {
  let t = 0;
  for (let n = r.length - 1; n >= 0; n--) {
    const s = r[n];
    s === "." ? r.splice(n, 1) : s === ".." ? (r.splice(n, 1), t++) : t && (r.splice(n, 1), t--);
  }
  if (e)
    for (; t; t--)
      r.unshift("..");
  return r;
}
function Ye(...r) {
  const e = new Uint8Array(
    r.reduce((n, s) => n + s.length, 0)
  );
  let t = 0;
  for (const n of r)
    e.set(n, t), t += n.length;
  return e;
}
function Ke(r) {
  if (r === void 0) {
    let e = new Uint8Array();
    return new TransformStream({
      transform(t) {
        e = Ye(e, t);
      },
      flush(t) {
        t.enqueue(e);
      }
    });
  } else {
    const e = new ArrayBuffer(r || 0);
    let t = 0;
    return new TransformStream({
      transform(n) {
        new Uint8Array(e).set(n, t), t += n.byteLength;
      },
      flush(n) {
        n.enqueue(new Uint8Array(e));
      }
    });
  }
}
function Ze(r, e) {
  if (e === 0)
    return new ReadableStream({
      start(s) {
        s.close();
      }
    });
  const t = r.getReader({ mode: "byob" });
  let n = 0;
  return new ReadableStream({
    async pull(s) {
      const { value: i, done: o } = await t.read(
        new Uint8Array(e - n)
      );
      if (o) {
        t.releaseLock(), s.close();
        return;
      }
      n += i.length, s.enqueue(i), n >= e && (t.releaseLock(), s.close());
    },
    cancel() {
      t.cancel();
    }
  });
}
async function Qe(r, e) {
  return e !== void 0 && (r = Ze(r, e)), await r.pipeThrough(Ke(e)).getReader().read().then(({ value: t }) => t);
}
class Xe extends File {
  /**
   * Creates a new StreamedFile instance.
   *
   * @param readableStream The readable stream containing the file data.
   * @param name The name of the file.
   * @param type The MIME type of the file.
   */
  constructor(e, t, n) {
    super([], t, { type: n }), this.readableStream = e;
  }
  /**
   * Overrides the slice() method of the File class.
   *
   * @returns A Blob representing a portion of the file.
   */
  slice() {
    throw new Error("slice() is not possible on a StreamedFile");
  }
  /**
   * Returns the readable stream associated with the file.
   *
   * @returns The readable stream.
   */
  stream() {
    return this.readableStream;
  }
  /**
   * Loads the file data into memory and then returns it as a string.
   *
   * @returns File data as text.
   */
  async text() {
    return new TextDecoder().decode(await this.arrayBuffer());
  }
  /**
   * Loads the file data into memory and then returns it as an ArrayBuffer.
   *
   * @returns File data as an ArrayBuffer.
   */
  async arrayBuffer() {
    return await Qe(this.stream());
  }
}
ReadableStream.prototype[Symbol.asyncIterator] || (ReadableStream.prototype[Symbol.asyncIterator] = async function* () {
  const r = this.getReader();
  try {
    for (; ; ) {
      const { done: e, value: t } = await r.read();
      if (e)
        return;
      yield t;
    }
  } finally {
    r.releaseLock();
  }
}, ReadableStream.prototype.iterate = // @ts-ignore
ReadableStream.prototype[Symbol.asyncIterator]);
function et(r, e) {
  return new ReadableStream({
    async pull(t) {
      const n = await r.readFileAsBuffer(e);
      t.enqueue(n), t.close();
    }
  });
}
async function* bt(r, e, {
  relativePaths: t = !0,
  pathPrefix: n,
  exceptPaths: s = []
} = {}) {
  e = oe(e);
  const i = [e];
  for (; i.length; ) {
    const o = i.pop();
    if (!o)
      return;
    const l = await r.listFiles(o);
    for (const d of l) {
      const f = `${o}/${d}`;
      if (s.includes(f.substring(e.length + 1)))
        continue;
      await r.isDir(f) ? i.push(f) : yield new Xe(
        et(r, f),
        t ? ge(
          n || "",
          f.substring(e.length + 1)
        ) : f
      );
    }
  }
}
function Pt(r, e) {
  return new WritableStream({
    async write(t) {
      const n = ge(e, t.name);
      t.type === "directory" ? await r.mkdir(n) : (await r.mkdir(Ve(n)), await r.writeFile(
        n,
        new Uint8Array(await t.arrayBuffer())
      ));
    }
  });
}
class H {
  constructor(e, t, n, s = "", i = 0) {
    this.httpStatusCode = e, this.headers = t, this.bytes = n, this.exitCode = i, this.errors = s;
  }
  static fromRawData(e) {
    return new H(
      e.httpStatusCode,
      e.headers,
      e.bytes,
      e.errors,
      e.exitCode
    );
  }
  toRawData() {
    return {
      headers: this.headers,
      bytes: this.bytes,
      errors: this.errors,
      exitCode: this.exitCode,
      httpStatusCode: this.httpStatusCode
    };
  }
  /**
   * Response body as JSON.
   */
  get json() {
    return JSON.parse(this.text);
  }
  /**
   * Response body as text.
   */
  get text() {
    return new TextDecoder().decode(this.bytes);
  }
}
const be = [
  "8.3",
  "8.2",
  "8.1",
  "8.0",
  "7.4",
  "7.3",
  "7.2",
  "7.1",
  "7.0"
], Et = be[0], St = be, tt = [
  "iconv",
  "mbstring",
  "xml-bundle",
  "gd"
], vt = {
  "kitchen-sink": tt
};
var _, A;
class rt {
  /**
   * @param  server - The PHP server to browse.
   * @param  config - The browser configuration.
   */
  constructor(e, t = {}) {
    c(this, _, void 0);
    c(this, A, void 0);
    this.requestHandler = e, p(this, _, {}), p(this, A, {
      handleRedirects: !1,
      maxRedirects: 4,
      ...t
    });
  }
  /**
   * Sends the request to the server.
   *
   * When cookies are present in the response, this method stores
   * them and sends them with any subsequent requests.
   *
   * When a redirection is present in the response, this method
   * follows it by discarding a response and sending a subsequent
   * request.
   *
   * @param  request   - The request.
   * @param  redirects - Internal. The number of redirects handled so far.
   * @returns PHPRequestHandler response.
   */
  async request(e, t = 0) {
    const n = await this.requestHandler.request({
      ...e,
      headers: {
        ...e.headers,
        cookie: this.serializeCookies()
      }
    });
    if (n.headers["set-cookie"] && this.setCookies(n.headers["set-cookie"]), a(this, A).handleRedirects && n.headers.location && t < a(this, A).maxRedirects) {
      const s = new URL(
        n.headers.location[0],
        this.requestHandler.absoluteUrl
      );
      return this.request(
        {
          url: s.toString(),
          method: "GET",
          headers: {}
        },
        t + 1
      );
    }
    return n;
  }
  /** @inheritDoc */
  pathToInternalUrl(e) {
    return this.requestHandler.pathToInternalUrl(e);
  }
  /** @inheritDoc */
  internalUrlToPath(e) {
    return this.requestHandler.internalUrlToPath(e);
  }
  /** @inheritDoc */
  get absoluteUrl() {
    return this.requestHandler.absoluteUrl;
  }
  /** @inheritDoc */
  get documentRoot() {
    return this.requestHandler.documentRoot;
  }
  setCookies(e) {
    for (const t of e)
      try {
        if (!t.includes("="))
          continue;
        const n = t.indexOf("="), s = t.substring(0, n), i = t.substring(n + 1).split(";")[0];
        a(this, _)[s] = i;
      } catch (n) {
        console.error(n);
      }
  }
  serializeCookies() {
    const e = [];
    for (const t in a(this, _))
      e.push(`${t}=${a(this, _)[t]}`);
    return e.join("; ");
  }
}
_ = new WeakMap(), A = new WeakMap();
const nt = "http://example.com";
function fe(r) {
  return r.toString().substring(r.origin.length);
}
function pe(r, e) {
  return !e || !r.startsWith(e) ? r : r.substring(e.length);
}
function st(r, e) {
  return !e || r.startsWith(e) ? r : e + r;
}
var g, $, O, F, U, b, B, L, M, Pe, j, Ee, W, Se;
class it {
  /**
   * @param  php    - The PHP instance.
   * @param  config - Request Handler configuration.
   */
  constructor(e, t = {}) {
    /**
     * Serves a static file from the PHP filesystem.
     *
     * @param  fsPath - Absolute path of the static file to serve.
     * @returns The response.
     */
    c(this, M);
    /**
     * Runs the requested PHP file with all the request and $_SERVER
     * superglobals populated.
     *
     * @param  request - The request.
     * @returns The response.
     */
    c(this, j);
    /**
     * Resolve the requested path to the filesystem path of the requested PHP file.
     *
     * Fall back to index.php as if there was a url rewriting rule in place.
     *
     * @param  requestedPath - The requested pathname.
     * @throws {Error} If the requested path doesn't exist.
     * @returns The resolved filesystem path.
     */
    c(this, W);
    c(this, g, void 0);
    c(this, $, void 0);
    c(this, O, void 0);
    c(this, F, void 0);
    c(this, U, void 0);
    c(this, b, void 0);
    c(this, B, void 0);
    c(this, L, void 0);
    p(this, L, new we({ concurrency: 1 }));
    const {
      documentRoot: n = "/www/",
      absoluteUrl: s = typeof location == "object" ? location == null ? void 0 : location.href : ""
    } = t;
    this.php = e, p(this, g, n);
    const i = new URL(s);
    p(this, O, i.hostname), p(this, F, i.port ? Number(i.port) : i.protocol === "https:" ? 443 : 80), p(this, $, (i.protocol || "").replace(":", ""));
    const o = a(this, F) !== 443 && a(this, F) !== 80;
    p(this, U, [
      a(this, O),
      o ? `:${a(this, F)}` : ""
    ].join("")), p(this, b, i.pathname.replace(/\/+$/, "")), p(this, B, [
      `${a(this, $)}://`,
      a(this, U),
      a(this, b)
    ].join(""));
  }
  /** @inheritDoc */
  pathToInternalUrl(e) {
    return `${this.absoluteUrl}${e}`;
  }
  /** @inheritDoc */
  internalUrlToPath(e) {
    const t = new URL(e);
    return t.pathname.startsWith(a(this, b)) && (t.pathname = t.pathname.slice(a(this, b).length)), fe(t);
  }
  get isRequestRunning() {
    return a(this, L).running > 0;
  }
  /** @inheritDoc */
  get absoluteUrl() {
    return a(this, B);
  }
  /** @inheritDoc */
  get documentRoot() {
    return a(this, g);
  }
  /** @inheritDoc */
  async request(e) {
    const t = e.url.startsWith("http://") || e.url.startsWith("https://"), n = new URL(
      e.url,
      t ? void 0 : nt
    ), s = pe(
      n.pathname,
      a(this, b)
    ), i = `${a(this, g)}${s}`;
    return lt(i) ? await m(this, j, Ee).call(this, e, n) : m(this, M, Pe).call(this, i);
  }
}
g = new WeakMap(), $ = new WeakMap(), O = new WeakMap(), F = new WeakMap(), U = new WeakMap(), b = new WeakMap(), B = new WeakMap(), L = new WeakMap(), M = new WeakSet(), Pe = function(e) {
  if (!this.php.fileExists(e))
    return new H(
      404,
      // Let the service worker know that no static file was found
      // and that it's okay to issue a real fetch() to the server.
      {
        "x-file-type": ["static"]
      },
      new TextEncoder().encode("404 File not found")
    );
  const t = this.php.readFileAsBuffer(e);
  return new H(
    200,
    {
      "content-length": [`${t.byteLength}`],
      // @TODO: Infer the content-type from the arrayBuffer instead of the file path.
      //        The code below won't return the correct mime-type if the extension
      //        was tampered with.
      "content-type": [at(e)],
      "accept-ranges": ["bytes"],
      "cache-control": ["public, max-age=0"]
    },
    t
  );
}, j = new WeakSet(), Ee = async function(e, t) {
  var s;
  const n = await a(this, L).acquire();
  try {
    this.php.addServerGlobalEntry("DOCUMENT_ROOT", a(this, g)), this.php.addServerGlobalEntry(
      "HTTPS",
      a(this, B).startsWith("https://") ? "on" : ""
    );
    let i = "GET";
    const o = {
      host: a(this, U),
      ...Be(e.headers || {})
    }, l = [];
    if (e.files && Object.keys(e.files).length) {
      i = "POST";
      for (const h in e.files) {
        const S = e.files[h];
        l.push({
          key: h,
          name: S.name,
          type: S.type,
          data: new Uint8Array(await S.arrayBuffer())
        });
      }
      (s = o["content-type"]) != null && s.startsWith("multipart/form-data") && (e.formData = ot(
        e.body || ""
      ), o["content-type"] = "application/x-www-form-urlencoded", delete e.body);
    }
    let d;
    e.formData !== void 0 ? (i = "POST", o["content-type"] = o["content-type"] || "application/x-www-form-urlencoded", d = new URLSearchParams(
      e.formData
    ).toString()) : d = e.body;
    let f;
    try {
      f = m(this, W, Se).call(this, t.pathname);
    } catch {
      return new H(
        404,
        {},
        new TextEncoder().encode("404 File not found")
      );
    }
    return await this.php.run({
      relativeUri: st(
        fe(t),
        a(this, b)
      ),
      protocol: a(this, $),
      method: e.method || i,
      body: d,
      fileInfos: l,
      scriptPath: f,
      headers: o
    });
  } finally {
    n();
  }
}, W = new WeakSet(), Se = function(e) {
  let t = pe(e, a(this, b));
  t.includes(".php") ? t = t.split(".php")[0] + ".php" : (t.endsWith("/") || (t += "/"), t.endsWith("index.php") || (t += "index.php"));
  const n = `${a(this, g)}${t}`;
  if (this.php.fileExists(n))
    return n;
  if (!this.php.fileExists(`${a(this, g)}/index.php`))
    throw new Error(`File not found: ${n}`);
  return `${a(this, g)}/index.php`;
};
function ot(r) {
  const e = {}, t = r.match(/--(.*)\r\n/);
  if (!t)
    return e;
  const n = t[1], s = r.split(`--${n}`);
  return s.shift(), s.pop(), s.forEach((i) => {
    const o = i.indexOf(`\r
\r
`), l = i.substring(0, o).trim(), d = i.substring(o + 4).trim(), f = l.match(/name="([^"]+)"/);
    if (f) {
      const h = f[1];
      e[h] = d;
    }
  }), e;
}
function at(r) {
  switch (r.split(".").pop()) {
    case "css":
      return "text/css";
    case "js":
      return "application/javascript";
    case "png":
      return "image/png";
    case "jpg":
    case "jpeg":
      return "image/jpeg";
    case "gif":
      return "image/gif";
    case "svg":
      return "image/svg+xml";
    case "woff":
      return "font/woff";
    case "woff2":
      return "font/woff2";
    case "ttf":
      return "font/ttf";
    case "otf":
      return "font/otf";
    case "eot":
      return "font/eot";
    case "ico":
      return "image/x-icon";
    case "html":
      return "text/html";
    case "json":
      return "application/json";
    case "xml":
      return "application/xml";
    case "txt":
    case "md":
      return "text/plain";
    default:
      return "application-octet-stream";
  }
}
function lt(r) {
  return ct(r) || ut(r);
}
function ct(r) {
  return r.endsWith(".php") || r.includes(".php/");
}
function ut(r) {
  return !r.split("/").pop().includes(".");
}
const D = {
  0: "No error occurred. System call completed successfully.",
  1: "Argument list too long.",
  2: "Permission denied.",
  3: "Address in use.",
  4: "Address not available.",
  5: "Address family not supported.",
  6: "Resource unavailable, or operation would block.",
  7: "Connection already in progress.",
  8: "Bad file descriptor.",
  9: "Bad message.",
  10: "Device or resource busy.",
  11: "Operation canceled.",
  12: "No child processes.",
  13: "Connection aborted.",
  14: "Connection refused.",
  15: "Connection reset.",
  16: "Resource deadlock would occur.",
  17: "Destination address required.",
  18: "Mathematics argument out of domain of function.",
  19: "Reserved.",
  20: "File exists.",
  21: "Bad address.",
  22: "File too large.",
  23: "Host is unreachable.",
  24: "Identifier removed.",
  25: "Illegal byte sequence.",
  26: "Operation in progress.",
  27: "Interrupted function.",
  28: "Invalid argument.",
  29: "I/O error.",
  30: "Socket is connected.",
  31: "There is a directory under that path.",
  32: "Too many levels of symbolic links.",
  33: "File descriptor value too large.",
  34: "Too many links.",
  35: "Message too large.",
  36: "Reserved.",
  37: "Filename too long.",
  38: "Network is down.",
  39: "Connection aborted by network.",
  40: "Network unreachable.",
  41: "Too many files open in system.",
  42: "No buffer space available.",
  43: "No such device.",
  44: "There is no such file or directory OR the parent directory does not exist.",
  45: "Executable file format error.",
  46: "No locks available.",
  47: "Reserved.",
  48: "Not enough space.",
  49: "No message of the desired type.",
  50: "Protocol not available.",
  51: "No space left on device.",
  52: "Function not supported.",
  53: "The socket is not connected.",
  54: "Not a directory or a symbolic link to a directory.",
  55: "Directory not empty.",
  56: "State not recoverable.",
  57: "Not a socket.",
  58: "Not supported, or operation not supported on socket.",
  59: "Inappropriate I/O control operation.",
  60: "No such device or address.",
  61: "Value too large to be stored in data type.",
  62: "Previous owner died.",
  63: "Operation not permitted.",
  64: "Broken pipe.",
  65: "Protocol error.",
  66: "Protocol not supported.",
  67: "Protocol wrong type for socket.",
  68: "Result too large.",
  69: "Read-only file system.",
  70: "Invalid seek.",
  71: "No such process.",
  72: "Reserved.",
  73: "Connection timed out.",
  74: "Text file busy.",
  75: "Cross-device link.",
  76: "Extension: Capabilities insufficient."
};
function ht(r) {
  const e = typeof r == "object" ? r == null ? void 0 : r.errno : null;
  if (e in D)
    return D[e];
}
function P(r = "") {
  return function(t, n, s) {
    const i = s.value;
    s.value = function(...o) {
      try {
        return i.apply(this, o);
      } catch (l) {
        const d = typeof l == "object" ? l == null ? void 0 : l.errno : null;
        if (d in D) {
          const f = D[d], h = typeof o[0] == "string" ? o[0] : null, S = h !== null ? r.replaceAll("{path}", h) : r;
          throw new Error(`${S}: ${f}`, {
            cause: l
          });
        }
        throw l;
      }
    };
  };
}
const dt = Symbol("RuntimeId"), q = /* @__PURE__ */ new Map();
async function Rt(r, e = {}, t = []) {
  const [n, s, i] = me(), [o, l] = me(), d = r.init(pt, {
    onAbort(h) {
      i(h), l(), console.error(h);
    },
    ENV: {},
    // Emscripten sometimes prepends a '/' to the path, which
    // breaks vite dev mode. An identity `locateFile` function
    // fixes it.
    locateFile: (h) => h,
    ...e,
    noInitialRun: !0,
    onRuntimeInitialized() {
      e.onRuntimeInitialized && e.onRuntimeInitialized(), s();
    },
    monitorRunDependencies(h) {
      h === 0 && (delete d.monitorRunDependencies, l());
    }
  });
  await Promise.all(
    t.map(
      ({ default: h }) => h(d)
    )
  ), t.length || l(), await o, await n;
  const f = q.size;
  return d.originalExit = d._exit, d._exit = function(h) {
    return q.delete(f), d.originalExit(h);
  }, d[dt] = f, q.set(f, d), f;
}
function ft(r) {
  return q.get(r);
}
const pt = function() {
  var r;
  return typeof process < "u" && ((r = process.release) == null ? void 0 : r.name) === "node" ? "NODE" : typeof window < "u" ? "WEB" : typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope ? "WORKER" : "NODE";
}(), me = () => {
  const r = [], e = new Promise((t, n) => {
    r.push(t, n);
  });
  return r.unshift(e), r;
};
var mt = Object.defineProperty, yt = Object.getOwnPropertyDescriptor, E = (r, e, t, n) => {
  for (var s = n > 1 ? void 0 : n ? yt(e, t) : e, i = r.length - 1, o; i >= 0; i--)
    (o = r[i]) && (s = (n ? o(e, t, s) : o(s)) || s);
  return n && s && mt(e, t, s), s;
};
const y = "string", C = "number", u = Symbol("__private__dont__use");
var k, R, T, x, v, I, N, z, ve, G, Re, V, xe, J, _e, Y, Fe, K, ke, Z, Te, Q, Ce, X, He, ee, Ae, te, $e, re, Ue;
class w {
  /**
   * Initializes a PHP runtime.
   *
   * @internal
   * @param  PHPRuntime - Optional. PHP Runtime ID as initialized by loadPHPRuntime.
   * @param  serverOptions - Optional. Options for the PHPRequestHandler. If undefined, no request handler will be initialized.
   */
  constructor(e, t) {
    c(this, z);
    c(this, G);
    c(this, V);
    c(this, J);
    c(this, Y);
    c(this, K);
    c(this, Z);
    c(this, Q);
    c(this, X);
    /**
     * Adds file information to $_FILES superglobal in PHP.
     *
     * In particular:
     * * Creates the file data in the filesystem
     * * Registers the file details in PHP
     *
     * @param  fileInfo - File details
     */
    c(this, ee);
    c(this, te);
    c(this, re);
    c(this, k, void 0);
    c(this, R, void 0);
    c(this, T, void 0);
    c(this, x, void 0);
    c(this, v, void 0);
    c(this, I, void 0);
    c(this, N, void 0);
    p(this, k, []), p(this, R, !1), p(this, T, null), p(this, x, {}), p(this, v, /* @__PURE__ */ new Map()), p(this, I, []), p(this, N, new we({ concurrency: 1 })), e !== void 0 && this.initializeRuntime(e), t && (this.requestHandler = new rt(
      new it(this, t)
    ));
  }
  addEventListener(e, t) {
    a(this, v).has(e) || a(this, v).set(e, /* @__PURE__ */ new Set()), a(this, v).get(e).add(t);
  }
  removeEventListener(e, t) {
    var n;
    (n = a(this, v).get(e)) == null || n.delete(t);
  }
  dispatchEvent(e) {
    const t = a(this, v).get(e.type);
    if (t)
      for (const n of t)
        n(e);
  }
  /** @inheritDoc */
  async onMessage(e) {
    a(this, I).push(e);
  }
  /** @inheritDoc */
  async setSpawnHandler(e) {
    this[u].spawnProcess = e;
  }
  /** @inheritDoc */
  get absoluteUrl() {
    return this.requestHandler.requestHandler.absoluteUrl;
  }
  /** @inheritDoc */
  get documentRoot() {
    return this.requestHandler.requestHandler.documentRoot;
  }
  /** @inheritDoc */
  pathToInternalUrl(e) {
    return this.requestHandler.requestHandler.pathToInternalUrl(e);
  }
  /** @inheritDoc */
  internalUrlToPath(e) {
    return this.requestHandler.requestHandler.internalUrlToPath(
      e
    );
  }
  initializeRuntime(e) {
    if (this[u])
      throw new Error("PHP runtime already initialized.");
    const t = ft(e);
    if (!t)
      throw new Error("Invalid PHP runtime id.");
    this[u] = t, t.onMessage = async (n) => {
      for (const s of a(this, I)) {
        const i = await s(n);
        if (i)
          return i;
      }
      return "";
    }, p(this, T, qe(t));
  }
  /** @inheritDoc */
  setPhpIniPath(e) {
    if (a(this, R))
      throw new Error("Cannot set PHP ini path after calling run().");
    this[u].ccall(
      "wasm_set_phpini_path",
      null,
      ["string"],
      [e]
    );
  }
  /** @inheritDoc */
  setPhpIniEntry(e, t) {
    if (a(this, R))
      throw new Error("Cannot set PHP ini entries after calling run().");
    a(this, k).push([e, t]);
  }
  /** @inheritDoc */
  chdir(e) {
    this[u].FS.chdir(e);
  }
  /** @inheritDoc */
  async request(e, t) {
    if (!this.requestHandler)
      throw new Error("No request handler available.");
    return this.requestHandler.request(e, t);
  }
  /** @inheritDoc */
  async run(e) {
    const t = await a(this, N).acquire();
    try {
      a(this, R) || (m(this, z, ve).call(this), p(this, R, !0)), m(this, Q, Ce).call(this, e.scriptPath || ""), m(this, V, xe).call(this, e.relativeUri || ""), m(this, Y, Fe).call(this, e.method || "GET");
      const n = Be(e.headers || {}), s = n.host || "example.com:443";
      if (m(this, J, _e).call(this, s, e.protocol || "http"), m(this, K, ke).call(this, n), e.body && m(this, Z, Te).call(this, e.body), e.fileInfos)
        for (const i of e.fileInfos)
          m(this, ee, Ae).call(this, i);
      return e.code && m(this, te, $e).call(this, " ?>" + e.code), m(this, X, He).call(this), await m(this, re, Ue).call(this);
    } finally {
      t(), this.dispatchEvent({
        type: "request.end"
      });
    }
  }
  addServerGlobalEntry(e, t) {
    a(this, x)[e] = t;
  }
  defineConstant(e, t) {
    let n = {};
    try {
      n = JSON.parse(
        this.fileExists("/tmp/consts.json") && this.readFileAsText("/tmp/consts.json") || "{}"
      );
    } catch {
    }
    this.writeFile(
      "/tmp/consts.json",
      JSON.stringify({
        ...n,
        [e]: t
      })
    );
  }
  mkdir(e) {
    this[u].FS.mkdirTree(e);
  }
  mkdirTree(e) {
    this.mkdir(e);
  }
  readFileAsText(e) {
    return new TextDecoder().decode(this.readFileAsBuffer(e));
  }
  readFileAsBuffer(e) {
    return this[u].FS.readFile(e);
  }
  writeFile(e, t) {
    this[u].FS.writeFile(e, t);
  }
  unlink(e) {
    this[u].FS.unlink(e);
  }
  /** @inheritDoc */
  mv(e, t) {
    try {
      this[u].FS.rename(e, t);
    } catch (n) {
      const s = ht(n);
      throw s ? new Error(
        `Could not move ${e} to ${t}: ${s}`,
        {
          cause: n
        }
      ) : n;
    }
  }
  rmdir(e, t = { recursive: !0 }) {
    t != null && t.recursive && this.listFiles(e).forEach((n) => {
      const s = `${e}/${n}`;
      this.isDir(s) ? this.rmdir(s, t) : this.unlink(s);
    }), this[u].FS.rmdir(e);
  }
  listFiles(e, t = { prependPath: !1 }) {
    if (!this.fileExists(e))
      return [];
    try {
      const n = this[u].FS.readdir(e).filter(
        (s) => s !== "." && s !== ".."
      );
      if (t.prependPath) {
        const s = e.replace(/\/$/, "");
        return n.map((i) => `${s}/${i}`);
      }
      return n;
    } catch (n) {
      return console.error(n, { path: e }), [];
    }
  }
  isDir(e) {
    return this.fileExists(e) ? this[u].FS.isDir(
      this[u].FS.lookupPath(e).node.mode
    ) : !1;
  }
  fileExists(e) {
    try {
      return this[u].FS.lookupPath(e), !0;
    } catch {
      return !1;
    }
  }
  exit(e = 0) {
    return this[u]._exit(e);
  }
}
k = new WeakMap(), R = new WeakMap(), T = new WeakMap(), x = new WeakMap(), v = new WeakMap(), I = new WeakMap(), N = new WeakMap(), z = new WeakSet(), ve = function() {
  if (this.setPhpIniEntry("auto_prepend_file", "/tmp/consts.php"), this.fileExists("/tmp/consts.php") || this.writeFile(
    "/tmp/consts.php",
    `<?php
				if(file_exists('/tmp/consts.json')) {
					$consts = json_decode(file_get_contents('/tmp/consts.json'), true);
					foreach ($consts as $const => $value) {
						if (!defined($const) && is_scalar($value)) {
							define($const, $value);
						}
					}
				}`
  ), a(this, k).length > 0) {
    const e = a(this, k).map(([t, n]) => `${t}=${n}`).join(`
`) + `

`;
    this[u].ccall(
      "wasm_set_phpini_entries",
      null,
      [y],
      [e]
    );
  }
  this[u].ccall("php_wasm_init", null, [], []);
}, G = new WeakSet(), Re = function() {
  const e = "/tmp/headers.json";
  if (!this.fileExists(e))
    throw new Error(
      "SAPI Error: Could not find response headers file."
    );
  const t = JSON.parse(this.readFileAsText(e)), n = {};
  for (const s of t.headers) {
    if (!s.includes(": "))
      continue;
    const i = s.indexOf(": "), o = s.substring(0, i).toLowerCase(), l = s.substring(i + 2);
    o in n || (n[o] = []), n[o].push(l);
  }
  return {
    headers: n,
    httpStatusCode: t.status
  };
}, V = new WeakSet(), xe = function(e) {
  if (this[u].ccall(
    "wasm_set_request_uri",
    null,
    [y],
    [e]
  ), e.includes("?")) {
    const t = e.substring(e.indexOf("?") + 1);
    this[u].ccall(
      "wasm_set_query_string",
      null,
      [y],
      [t]
    );
  }
}, J = new WeakSet(), _e = function(e, t) {
  this[u].ccall(
    "wasm_set_request_host",
    null,
    [y],
    [e]
  );
  let n;
  try {
    n = parseInt(new URL(e).port, 10);
  } catch {
  }
  (!n || isNaN(n) || n === 80) && (n = t === "https" ? 443 : 80), this[u].ccall(
    "wasm_set_request_port",
    null,
    [C],
    [n]
  ), (t === "https" || !t && n === 443) && this.addServerGlobalEntry("HTTPS", "on");
}, Y = new WeakSet(), Fe = function(e) {
  this[u].ccall(
    "wasm_set_request_method",
    null,
    [y],
    [e]
  );
}, K = new WeakSet(), ke = function(e) {
  e.cookie && this[u].ccall(
    "wasm_set_cookies",
    null,
    [y],
    [e.cookie]
  ), e["content-type"] && this[u].ccall(
    "wasm_set_content_type",
    null,
    [y],
    [e["content-type"]]
  ), e["content-length"] && this[u].ccall(
    "wasm_set_content_length",
    null,
    [C],
    [parseInt(e["content-length"], 10)]
  );
  for (const t in e) {
    let n = "HTTP_";
    ["content-type", "content-length"].includes(t.toLowerCase()) && (n = ""), this.addServerGlobalEntry(
      `${n}${t.toUpperCase().replace(/-/g, "_")}`,
      e[t]
    );
  }
}, Z = new WeakSet(), Te = function(e) {
  this[u].ccall(
    "wasm_set_request_body",
    null,
    [y],
    [e]
  ), this[u].ccall(
    "wasm_set_content_length",
    null,
    [C],
    [new TextEncoder().encode(e).length]
  );
}, Q = new WeakSet(), Ce = function(e) {
  this[u].ccall(
    "wasm_set_path_translated",
    null,
    [y],
    [e]
  );
}, X = new WeakSet(), He = function() {
  for (const e in a(this, x))
    this[u].ccall(
      "wasm_add_SERVER_entry",
      null,
      [y, y],
      [e, a(this, x)[e]]
    );
}, ee = new WeakSet(), Ae = function(e) {
  const { key: t, name: n, type: s, data: i } = e, o = `/tmp/${Math.random().toFixed(20)}`;
  this.writeFile(o, i);
  const l = 0;
  this[u].ccall(
    "wasm_add_uploaded_file",
    null,
    [y, y, y, y, C, C],
    [t, n, s, o, l, i.byteLength]
  );
}, te = new WeakSet(), $e = function(e) {
  this[u].ccall(
    "wasm_set_php_code",
    null,
    [y],
    [e]
  );
}, re = new WeakSet(), Ue = async function() {
  var i;
  let e, t;
  try {
    e = await new Promise((o, l) => {
      var f;
      t = (h) => {
        const S = new Error("Rethrown");
        S.cause = h.error, S.betterMessage = h.message, l(S);
      }, (f = a(this, T)) == null || f.addEventListener(
        "error",
        t
      );
      const d = this[u].ccall(
        "wasm_sapi_handle_request",
        C,
        [],
        [],
        { async: !0 }
      );
      return d instanceof Promise ? d.then(o, l) : o(d);
    });
  } catch (o) {
    for (const h in this)
      typeof this[h] == "function" && (this[h] = () => {
        throw new Error(
          "PHP runtime has crashed – see the earlier error for details."
        );
      });
    this.functionsMaybeMissingFromAsyncify = De();
    const l = o, d = "betterMessage" in l ? l.betterMessage : l.message, f = new Error(d);
    throw f.cause = l, f;
  } finally {
    (i = a(this, T)) == null || i.removeEventListener("error", t), p(this, x, {});
  }
  const { headers: n, httpStatusCode: s } = m(this, G, Re).call(this);
  return new H(
    s,
    n,
    this.readFileAsBuffer("/tmp/stdout"),
    this.readFileAsText("/tmp/stderr"),
    e
  );
};
E([
  P('Could not create directory "{path}"')
], w.prototype, "mkdir", 1);
E([
  P('Could not create directory "{path}"')
], w.prototype, "mkdirTree", 1);
E([
  P('Could not read "{path}"')
], w.prototype, "readFileAsText", 1);
E([
  P('Could not read "{path}"')
], w.prototype, "readFileAsBuffer", 1);
E([
  P('Could not write to "{path}"')
], w.prototype, "writeFile", 1);
E([
  P('Could not unlink "{path}"')
], w.prototype, "unlink", 1);
E([
  P('Could not remove directory "{path}"')
], w.prototype, "rmdir", 1);
E([
  P('Could not list files in "{path}"')
], w.prototype, "listFiles", 1);
E([
  P('Could not stat "{path}"')
], w.prototype, "isDir", 1);
E([
  P('Could not stat "{path}"')
], w.prototype, "fileExists", 1);
function Be(r) {
  const e = {};
  for (const t in r)
    e[t.toLowerCase()] = r[t];
  return e;
}
function wt(r) {
  return !(r instanceof w);
}
function xt(r) {
  return !wt(r);
}
export {
  w as BasePHP,
  nt as DEFAULT_BASE_URL,
  Et as LatestSupportedPHPVersion,
  rt as PHPBrowser,
  it as PHPRequestHandler,
  H as PHPResponse,
  vt as SupportedPHPExtensionBundles,
  tt as SupportedPHPExtensionsList,
  be as SupportedPHPVersions,
  St as SupportedPHPVersionsList,
  Ne as UnhandledRejectionsTarget,
  u as __private__dont__use,
  st as ensurePathPrefix,
  Oe as isExitCodeZero,
  wt as isLocalPHP,
  xt as isRemotePHP,
  bt as iterateFiles,
  Rt as loadPHPRuntime,
  pe as removePathPrefix,
  P as rethrowFileSystemError,
  fe as toRelativeUrl,
  Pt as writeFilesStreamToPhp
};
